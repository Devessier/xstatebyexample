---
import { Image } from "astro:assets";
import Layout from "../layouts/Layout.astro";
import { css } from "../../styled-system/css";
import { grid } from "../../styled-system/patterns";
import { StandaloneDemo as SearchAsYouTypeDemo } from "../examples/search-as-you-type/StandaloneDemo.tsx";
import { Content as SearchAsYouTypeCode } from "../assets/home/code.md";
import { getCollection } from "astro:content";
import AppMachineDifficultyBadge from "../components/AppMachineDifficultyBadge.astro";

const machineEntries = await getCollection('machines')

const orderedMachineEntries = machineEntries.sort((a, b) => a.data.id - b.data.id);
---

<Layout title="XState by Example" ogType="website">
  <header
    class={css({
      px: { base: "4", sm: "6", lg: "8" },
      pt: { base: "10", sm: "14", lg: "24" },
    })}
  >
    <div class={css({ maxW: "5xl", mx: "auto" })}>
      <h1
        class={css({
          color: "gray.900",
          fontWeight: "extrabold",
          fontSize: { base: "4xl", sm: "5xl", lg: "6xl" },
          textAlign: "center",
          letterSpacing: "tight",
          lineHeight: "tight",
        })}
      >
        Learn XState from real examples accompanied by interactive demos.
      </h1>

      <p
        class={css({
          maxW: "3xl",
          mx: "auto",
          mt: "10",
          fontSize: { base: "lg", sm: "xl" },
          textAlign: "center",
          color: "gray.700",
          "& > a": {
            fontWeight: "semibold",
            textDecoration: "underline",
          },
        })}
      >
        Each machine has a handcrafted demo proving the benefit of using XState.
        <em class={css({ fontStyle: "italic" })}>XState by Example</em> uses the
        most up-to-date tools developed by <a href="https://stately.ai/"
          >Stately</a
        >, including <a href="https://stately.ai/docs/quick-start">XState 5</a> and
        <a href="https://github.com/statelyai/inspect">Stately Inspect</a>.
      </p>
    </div>

    <div
      class={css({
        maxW: "7xl",
        mx: "auto",
        mt: "24",
        display: "grid",
        gridTemplateColumns: 1,
        lg: {
          gridTemplateColumns: 12,
          gap: "8",
          alignItems: "center",
        },
      })}
    >
      <div
        class={css({
          pos: "relative",
          lg: {
            gridColumnStart: 7,
            gridColumnEnd: 13,
            gridRowStart: 1,
          },
        })}
      >
        <SearchAsYouTypeCode />

        <div
          class={css({
            pos: "absolute",
            insetX: 0,
            bottom: 0,
            display: "flex",
            justifyContent: "center",
            bgGradient: "to-t",
            gradientFrom: { base: "#fff", _osDark: "#24292e" },
            gradientTo: { base: "#fff0", _osDark: "#24292e00" },
            pb: "12",
            pt: "32",
            // These values are injected by Expressive Code.
            borderRadius: "calc(var(--ec-brdRad) + var(--ec-brdWd))",
          })}
        >
          <a
            href="/search-as-you-type/"
            class={css({
              rounded: "md",
              px: "2.5",
              py: "1.5",
              fontSize: "sm",
              lineHeight: "sm",
              fontWeight: "semibold",
              shadow: "sm",
              cursor: "pointer",
              color: "gray.50",
              bgColor: { base: "gray.800", _hover: "gray.700" },
              _osDark: {
                color: "gray.800",
                bgColor: { base: "gray.50", _hover: "gray.100" },
              },
            })}
          >
            Show more
          </a>
        </div>
      </div>
      <div
        class={css({
          mt: { base: "12", lg: "0" },
          lg: {
            gridColumnStart: 1,
            gridColumnEnd: 7,
            gridRowStart: 1,
          },
        })}
      >
        <div
          class={css({
            maxW: "md",
            mx: "auto",
            bg: "white",
            px: "6",
            py: "8",
            rounded: "lg",
            shadow: "lg",
            display: "flex",
            flexDirection: "column",
          })}
        >
          <p class={css({ fontSize: "lg", fontWeight: "bold" })}>
            Search as you type
          </p>

          <div
            class={css({
              display: "flex",
              justifyContent: "center",
              mt: "4",
              mx: "-2",
            })}
          >
            <SearchAsYouTypeDemo client:idle />
          </div>
        </div>
      </div>
    </div>
  </header>

  <section
    class={css({
      pt: { base: "20", sm: "24", lg: "32" },
    })}
  >
    <header>
      <div
        class={css({
          ml: "auto",
          mr: "auto",
          maxW: "7xl",
          pl: "4",
          pr: "4",
          sm: { pl: "6", pr: "6" },
          lg: { pl: "8", pr: "8" },
        })}
      >
        <h2
          class={css({
            fontSize: "3xl",
            lineHeight: "tight",
            fontWeight: "bold",
            letterSpacing: "tight",
            color: "gray.900",
          })}
        >
          Examples
        </h2>
      </div>
    </header>
    <div class={css({ mt: "10" })}>
      <div
        class={css({
          ml: "auto",
          mr: "auto",
          maxW: "7xl",
          pl: "4",
          pr: "4",
          sm: { pl: "6", pr: "6" },
          lg: { pl: "8", pr: "8" },
        })}
      >
        <div class={grid({ columns: { base: 1, sm: 2, lg: 3 }, gap: "4", gridAutoRows: "1fr" })}>
          {
            orderedMachineEntries.map(({ slug, data: { title, image, complexity } }) => (
              <article
                class={css({
                  pos: "relative",
                  shadow: "md",
                  bg: "white",
                  rounded: "xl",
                  p: "4",
                  translate: "auto",
                  transition: "all",
                  transitionTimingFunction: "ease-in-out",
                  transitionDuration: "fast",
                  _hover: { translateY: "-2" },
                })}
              >
                <Image
                  src={image.url}
                  alt=""
                  width={image.width}
                  height={image.height}
                  class={css({
                    aspectRatio: "wide",
                    objectFit: "cover",
                    bg: "#f5f7f7",
                    rounded: "md",
                    borderStyle: "solid",
                    borderWidth: "2px",
                    borderColor: "gray.300",
                  })}
                />

                <h3
                  class={css({
                    mt: "3",
                    fontSize: "xl",
                    fontWeight: "semibold",
                  })}
                >
                  <a
                    href={`/${slug}/`}
                    class={css({
                      _after: { content: '""', pos: "absolute", inset: 0 },
                    })}
                  >
                    {title}
                  </a>
                </h3>

                <div class={css({ mt: "2" })}>
                  <AppMachineDifficultyBadge {complexity} />
                </div>
              </article>
            ))
          }

          <article
            class={css({
              display: "flex",
              flexDirection: "column",
              justifyContent: "space-evenly",
              alignItems: "center",
              rowGap: "4",
              shadow: "md",
              bg: "white",
              rounded: "xl",
              p: "8",
              translate: "auto",
              transition: "all",
              transitionTimingFunction: "ease-in-out",
              transitionDuration: "fast",
              _hover: { translateY: "-2" },
            })}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class={css({
                w: "14",
                h: "14",
                color: "gray.400",
              })}
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM16.894 20.567 16.5 21.75l-.394-1.183a2.25 2.25 0 0 0-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 0 0 1.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 0 0 1.423 1.423l1.183.394-1.183.394a2.25 2.25 0 0 0-1.423 1.423Z"
              ></path>
            </svg>

            <h3
              class={css({
                fontSize: "xl",
                fontWeight: "semibold",
                textAlign: "center",
              })}
            >
              Do you have an idea for a new machine?
            </h3>

            <a
              href="https://github.com/Devessier/xstatebyexample/issues/new?title=New%20state%20machine%20idea&body=I%20have%20an%20idea%20of%20a%20new%20state%20machine..."
              target="_blank"
              class={css({
                rounded: "md",
                px: "2.5",
                py: "1.5",
                fontSize: "md",
                lineHeight: "sm",
                fontWeight: "semibold",
                shadow: "sm",
                cursor: "pointer",
                color: "gray.50",
                textAlign: "center",
                bgColor: "gray.800",
                _after: { content: '""', pos: "absolute", inset: 0 },
              })}
            >
              Share it on GitHub
            </a>
          </article>
        </div>
      </div>
    </div>
  </section>
</Layout>
../examples/search-as-you-type/StandaloneDemo.tsx